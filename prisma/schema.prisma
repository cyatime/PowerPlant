// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// scope 表
model Scope {
  id        String        @id @default(cuid())
  updatedAt DateTime      @default(now()) @map("updated_at")
  createdAt DateTime      @default(now()) @map("created_at")
  name      String?
  users     ScopeOnUser[]

  @@map("zap_tb_scope")
}

model ScopeOnUser {
  createdAt DateTime @default(now()) @map("created_at")
  scope     Scope?   @relation(fields: [scopeId], references: [id])
  scopeId   String   @map("scope_id")
  user      User?    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@id([scopeId, userId])
  @@map("zap_link_scope_on_user")
}

//用户表
model User {
  id          String         @id @default(cuid())
  updatedAt   DateTime       @default(now()) @map("updated_at")
  createdAt   DateTime       @default(now()) @map("created_at")
  username    String?        @unique @default("")
  password    String?        @default("")
  email       String?        @unique @default("")
  emailCode   String?        @map("email_code") @db.Text
  isLocked    Int?           @default(1) @map("is_locked")
  isValid     Int            @default(1) @map("is_valid")
  scopes      ScopeOnUser[]
  devices     UserOnDevice[]
  deviceLimit Int?           @default(5) @map("device_limit")

  @@map("zap_tb_user")
}

model UserOnDevice {
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  userId    String   @map("user_id")
  deviceId  String   @map("device_id")

  User   User   @relation(fields: [userId], references: [id])
  Device Device @relation(fields: [deviceId], references: [id])
  @@id([userId, deviceId])
  @@map("zap_link_user_on_device")
}

model Grant {
  id        String          @id @default(cuid())
  updatedAt DateTime        @default(now()) @map("updated_at")
  createdAt DateTime        @default(now()) @map("created_at")
  name      String?         @unique @default("")
  device    GrantOnDevice[]

  @@map("zap_tb_grant")
}

model GrantOnDevice {
  createdAt DateTime @default(now()) @map("created_at")
  grant     Grant?   @relation(fields: [grantId], references: [id])
  grantId   String   @map("grant_id")
  device    Device?  @relation(fields: [deviceId], references: [id])
  deviceId  String   @map("device_id")

  @@id([grantId, deviceId])
  @@map("zap_link_grant_on_device")
}

model Device {
  id                          String          @id @default(cuid())
  updatedAt                   DateTime        @default(now()) @map("updated_at")
  createdAt                   DateTime        @default(now()) @map("created_at")
  name                        String?         @default("")
  type                        String?         @default("")
  engine                      String?         @default("")
  os                          String?         @default("")
  deviceId                    String?         @unique @default("") @map("device_id")
  deviceSecret                String?         @default("") @map("device_secret")
  isLocked                    Int?            @default(1) @map("is_locked")
  accessTokenValidateSeconds  Int             @default(1800) @map("access_token_validate_seconds")
  refreshTokenValidateSeconds Int             @default(604800) @map("refresh_token_validate_seconds")
  users                       UserOnDevice[]
  isOnline                    Int?            @default(1) @map("is_online") @db.TinyInt
  grants                      GrantOnDevice[]

  @@map("zap_tb_device")
}

model Config {
  id        String   @id @default(cuid())
  name      String   @unique @default("")
  value     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  introduce String?  @default("")

  ConfigType   ConfigType? @relation(fields: [configTypeId], references: [id])
  configTypeId String?     @map("type_id")

  @@map("zap_tb_config")
}

model ConfigType {
  id      String   @id @default(cuid())
  name    String   @unique @default("")
  configs Config[]

  @@map("zap_tb_config_type")
}

model Channel {
  id        String    @id @default(cuid())
  name      String    @unique @default("")
  channelId String?   @default("") @map("channel_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  introduce String?   @db.Text
  playUrl   PlayUrl[]
  programs  Program[]

  @@map("zap_tb_channel")
}

model PlayUrl {
  id        String   @id @default(cuid())
  name      String   @unique @default("")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  Channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?  @map("channel_id")

  @@map("zap_tb_playurl")
}

model Program {
  id        String  @id @default(cuid())
  name      String  @unique @default("")
  introduce String? @db.Text

  startTime String @map("start_time") @db.Text
  endTime   String @map("end_time") @db.Text

  Channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?  @map("channel_id")
  @@map("zap_tb_program")
}

model M3U {
  id             String          @id @default(cuid())
  url            String          @unique @default("")
  name           String          @default("")
  channelSources ChannelSource[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("zap_tb_m3u")
}

model ChannelSource {
  id        String  @id @default(cuid())
  channelId String  @map("channel_id")
  logo      String? @db.Text
  name      String  @db.Text
  language  String  @db.Text
  country   String  @db.Text
  playUrl   String  @unique
  status    Int     @default(-1)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  M3U   M3U?    @relation(fields: [m3UId], references: [id])
  m3UId String? @map("m3u_Id")
  @@map("zap_tb_channel_source")
}

model EPGUrl {
  id   String @id @default(cuid())
  url  String @unique @map("url")
  name String @unique @map("name")

  epgSourceChannel EPGSourceChannel[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("zap_tb_program_url")
}

model EPGSourceChannel {
  id        String  @id @default(cuid())
  channelId String? @default("") @map("channel_id")
  name      String?
  logo      String? @default("")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")


  EPGUrl   EPGUrl? @relation(fields: [ePGUrlId], references: [id])
  ePGUrlId String? @map("epg_url_id")
  @@map("zap_tb_program_channel")
}

model OperationLog {
  id      String @id @default(cuid())
  level   String @default("info")
  message String @db.Text
  context String @db.Text
  user    String @default("")

  createdAt DateTime @default(now()) @map("created_at")
  @@map("zap_tb_operation_log")
}

// oauth2 table list
model OAuthClientDetails {
  id                    String   @id @default(cuid())
  cliendId              String   @default(uuid()) @map("client_id")
  resourceIds           String   @default("") @map("resource_ids")
  clientSecret          String   @default("") @map("client_secret")
  //客户端申请的权限范围,可选值包括read,write,trust;若有多个权限范围用逗号(,)分隔
  scope                 String   @default("") @map("scope")
  authorizedGrantTypes  String   @default("") @map("authorized_grant_types")
  webServerRedirectUri  String   @default("") @map("web_server_redirect_uri")
  //客户端所拥有的Spring Security的权限值,可选, 若有多个权限值,用逗号(,)分隔
  authorities           String   @default("") @map("authorities")
  accessTokenValidity   Int      @default(1800) @map("access_token_validity")
  refreshTokenValidity  Int      @default(604800) @map("refresh_token_validity")
  //这是一个预留的字段,在Oauth的流程中没有实际的使用,可选,但若设置值,必须是JSON格式的数据
  additionalInformation String   @default("") @map("additional_information")
  //设置用户是否自动批准授予权限操作, 默认值为 ‘false’, 可选值包括 ‘true’,‘false’, ‘read’,‘write’.
  autoApprove           String   @default("") @map("auto_approve")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @map("updated_at")

  @@map("zap_tb_oauth_client_details")
}

model OAuthClientToken {
  id               String   @id @default(cuid())
  tokenId          String   @default("") @map("token_id")
  token            String   @default("") @map("token")
  authenticationId String   @default("") @map("authentication_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")

  @@map("zap_tb_oauth_client_token")
}

model OAuthAccessToken {
  id String @id @default(cuid())

  //认证授权客户端ID
  clientId String @default("") @map("client_id")
  //Token标识：通过MD5加密access_token的值
  tokenId  String @default("") @map("token_id")
  //OAuth2AccessToken.java对象序列化内容
  token    String @default("") @map("token")
  // 用户名，若客户端没有用户名则该值等于client_id
  username String @default("")

  //根据当前的username、client_id与scope通过MD5加密生成该字段的值
  authenticationId String @default("") @map("authentication_id")

  //OAuth2Authentication.java对象序列化内容
  authentication String @default("") @map("authentication")

  //RefreshToken标识：通过MD5加密refresh_token的值
  refreshToken String @default("") @map("refresh_token")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("zap_tb_oauth_access_token")
}

model OAuthRefreshToken {
  id             String @id @default(cuid())
  //RefreshToken标识：通过MD5加密refresh_token的值
  tokenId        String @default("") @map("token_id")
  //OAuth2RefreshToken.java对象序列化内容
  token          String @default("") @map("token")
  //OAuth2Authentication.java对象序列化内容
  authentication String @default("") @map("authentication")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("zap_tb_oauth_refresh_token")
}

model OAuthCode {
  id             String @id @default(cuid())
  //AuthorizationRequestHolder.java对象序列化内容
  authentication String @default("") @map("authentication")
  //存储服务端系统生成的code的值(未加密)
  code           String @default("") @map("code")

  @@map("zap_tb_oauth_code")
}

model OAuthApprovals {
  id        String   @id @default(cuid())
  userId    String   @default("") @map("user_id")
  clientId  String   @default("") @map("client_id")
  scope     String   @default("") @map("scope")
  status    String   @default("") @map("status")
  expiresAt DateTime @default(now()) @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("zap_tb_oauth_approvals")
}

model clientDetails {
  id                    String   @id @default(cuid())
  appId                 String   @default(uuid())
  cliendId              String   @default("") @map("client_id")
  resourceIds           String   @default("") @map("resource_ids")
  appSecret             String   @default("") @map("app_secret")
  scope                 String   @default("") @map("scope")
  grantTypes            String   @default("") @map("grant_types")
  redirectUrl           String   @default("") @map("redirect_url")
  authorities           String   @default("") @map("authorities")
  accessTokenValidity   Int      @default(1800) @map("access_token_validity")
  refreshTokenValidity  Int      @default(604800) @map("refresh_token_validity")
  additionalInformation String   @default("") @map("additional_information")
  autoApproveScope      String   @default("") @map("auto_approve_scope")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @map("updated_at")

  @@map("zap_tb_client_details")
}
