// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// scope 表
model Scope {
  id        String        @id @default(uuid())
  updatedAt DateTime      @default(now()) @map("updated_at")
  createdAt DateTime      @default(now()) @map("created_at")
  name      String?
  users     ScopeOnUser[]

  @@map("zap_tb_scope")
}

model ScopeOnUser {
  createdAt DateTime @default(now()) @map("created_at")
  scope     Scope?   @relation(fields: [scopeId], references: [id])
  scopeId   String   @map("scope_id")
  user      User?    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@id([scopeId, userId])
  @@map("zap_link_scope_on_user")
}

//用户表
model User {
  id          String         @id @default(uuid())
  updatedAt   DateTime       @default(now()) @map("updated_at")
  createdAt   DateTime       @default(now()) @map("created_at")
  username    String?        @unique @default("")
  password    String?        @default("")
  email       String?        @unique @default("")
  emailCode   String?        @map("email_code") @db.Text
  isLocked    Int?           @default(1) @map("is_locked")
  isValid     Int            @default(1) @map("is_valid")
  scopes      ScopeOnUser[]
  devices     UserOnDevice[]
  deviceLimit Int?           @default(5) @map("device_limit")

  Device Device[]
  @@map("zap_tb_user")
}

model UserOnDevice {
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  deviceId  String   @map("device_id")

  User   User   @relation(fields: [userId], references: [id])
  Device Device @relation(fields: [deviceId], references: [id])
  @@id([userId, deviceId])
  @@map("zap_link_user_on_device")
}

model Grant {
  id        String          @id @default(uuid())
  updatedAt DateTime        @default(now()) @map("updated_at")
  createdAt DateTime        @default(now()) @map("created_at")
  name      String?         @unique @default("")
  device    GrantOnDevice[]

  @@map("zap_tb_grant")
}

model GrantOnDevice {
  createdAt DateTime @default(now()) @map("created_at")
  grant     Grant?   @relation(fields: [grantId], references: [id])
  grantId   String   @map("grant_id")
  device    Device?  @relation(fields: [deviceId], references: [id])
  deviceId  String   @map("device_id")

  @@id([grantId, deviceId])
  @@map("zap_link_grant_on_device")
}

model Device {
  id                          String          @id @default(uuid())
  updatedAt                   DateTime        @default(now()) @map("updated_at")
  createdAt                   DateTime        @default(now()) @map("created_at")
  name                        String?         @default("")
  type                        String?         @default("")
  engine                      String?         @default("")
  os                          String?         @default("")
  deviceId                    String?         @unique @default("") @map("device_id")
  deviceSecret                String?         @default("") @map("device_secret")
  isLocked                    Int?            @default(1) @map("is_locked")
  accessTokenValidateSeconds  Int             @default(1800) @map("access_token_validate_seconds")
  refreshTokenValidateSeconds Int             @default(604800) @map("refresh_token_validate_seconds")
  users                       UserOnDevice[]
  isOnline                    Int?            @default(1) @map("is_online") @db.TinyInt
  grants                      GrantOnDevice[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  @@map("zap_tb_device")
}

model Config {
  id        String   @id @default(uuid())
  name      String   @unique @default("")
  value     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  introduce String?  @default("")

  ConfigType   ConfigType? @relation(fields: [configTypeId], references: [id])
  configTypeId String?     @map("type_id")

  @@map("zap_tb_config")
}

model ConfigType {
  id      String   @id @default(uuid())
  name    String   @unique @default("")
  configs Config[]

  @@map("zap_tb_config_type")
}

model Channel {
  id        String    @id @default(uuid())
  name      String    @unique @default("")
  channelId String?   @default("") @map("channel_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  introduce String?   @db.Text
  playUrl   PlayUrl[]
  programs  Program[]

  @@map("zap_tb_channel")
}

model PlayUrl {
  id        String   @id @default(uuid())
  name      String   @unique @default("")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  Channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?  @map("channel_id")

  @@map("zap_tb_playurl")
}

model Program {
  id        String  @id @default(uuid())
  name      String  @unique @default("")
  introduce String? @db.Text

  startTime String @map("start_time") @db.Text
  endTime   String @map("end_time") @db.Text

  Channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?  @map("channel_id")
  @@map("zap_tb_program")
}

model ChannelSource {
  id        String  @id @default(cuid())
  channelId String  @unique @map("channel_id")
  logo      String?
  name      String
  language  String?
  country   String?
  playUrl   String?
  status    Int     @default(-1)

  @@map("zap_tb_channel_source")
}

model ProgramUrl {
  id             String           @id @default(cuid())
  url            String           @unique @map("url")
  ProgramChannel ProgramChannel[]

  @@map("zap_tb_program_url")
}

model ProgramChannel {
  id           String     @id @default(cuid())
  xmlId        ProgramUrl @relation(fields: [programUrlId], references: [id])
  programUrlId String     @map("program_url_id")
  channelId    String     @map("channel_id")
  name         String?

  @@map("zap_tb_program_channel")
}
